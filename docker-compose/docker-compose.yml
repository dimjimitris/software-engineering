version: '3'
services:
  nginx:
    image: nginx:latest
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - '29092:29092'
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # This "container" is a workaround to pre-create topics
  kafka-setup:
    image: confluentinc/cp-kafka:5.1.1
    hostname: kafka-setup
    container_name: kafka-setup
    depends_on:
      - kafka
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka:9092 1 20 && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-line-basic && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-line-basic && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-basic-column && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-basic-column && \
                       echo Waiting 60 seconds for Connect to be ready... && \
                       sleep 60'"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyway, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  mycharts-data-uploader:
    build:
      context: ../microservice-data-uploader
      dockerfile: Dockerfile
    volumes:
      - ../microservice-data-uploader:/app
    ports:
      - "3001:3001"

  mycharts-frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    depends_on:
      - kafka
    ports:
      - "3000:3000"

  chart-line-basic:
    build:
      context: ../microservice-chart-line-basic
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - kafka-setup
      - mycharts-data-uploader
    ports:
      - "3003:3003"

  store-line-basic:
    build:
      context: ../microservice-store-line-basic
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - kafka-setup
      - mycharts-data-uploader
      - chart-line-basic
    ports:
      - "3020:3020"

  store-basic-column:
    build:
      context: ../microservice-store-basic-column
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - kafka-setup
    ports:
      - "3021:3021"

  diagram-fetcher:
    build:
      context: ../microservice-diagram-fetcher
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - kafka-setup
      - mycharts-data-uploader
    ports:
      - "3030:3030"