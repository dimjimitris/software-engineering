version: "3"
services:
    nginx:
        image: nginx:latest
        depends_on:
            - mycharts-frontend
        ports:
            - "80:80"
        volumes:
            - ./nginx.conf:/etc/nginx/conf.d/default.conf

    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181

    kafka:
        image: confluentinc/cp-kafka:latest
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
            - "29092:29092"
        environment:
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    # This "container" is a workaround to pre-create topics
    kafka-setup:
        image: confluentinc/cp-kafka:5.1.1
        hostname: kafka-setup
        container_name: kafka-setup
        depends_on:
            - kafka
        command: "bash -c 'echo Waiting for Kafka to be ready... && \
            cub kafka-ready -b kafka:9092 1 20 && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-line-basic && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-line-basic && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-line-annotations && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-line-annotations && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-basic-column && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-basic-column && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-pie && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-pie && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-dependency-wheel && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-dependency-wheel && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-network-graph && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-network-graph && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-polar && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-polar && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-word-cloud && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-word-cloud && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-organization && \
            kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-organization && \
            echo Waiting 60 seconds for Connect to be ready... && \
            sleep 60'"
        environment:
            # The following settings are listed here only to satisfy the image's requirements.
            # We override the image's `command` anyway, hence this container will not start a broker.
            KAFKA_BROKER_ID: ignored
            KAFKA_ZOOKEEPER_CONNECT: ignored

    mycharts-data-uploader:
        build:
            context: ../microservice-data-uploader
            dockerfile: Dockerfile
        volumes:
            - ../microservice-data-uploader:/app
        ports:
            - "3001:3001"

    mycharts-frontend:
        build:
            context: ../frontend
            dockerfile: Dockerfile
        depends_on:
            - kafka
        ports:
            - "3000:3000"

    chart-line-basic:
        build:
            context: ../microservice-chart-line-basic
            dockerfile: Dockerfile
        depends_on:
            - kafka
            - kafka-setup
            - mycharts-data-uploader
        ports:
            - "3003:3003"

    store-line-basic:
        build:
            context: ../chart_storing_ms
            dockerfile: Dockerfile
        environment:
            - PORT=3020
            - DB_NAME=diagrams_line_basic
            - TOPIC=svg-chart-line-basic
        expose:
            - "3020"
        depends_on:
            - kafka
            - kafka-setup
        ports:
            - "3020:3020"

    store-basic-column:
        build:
            context: ../chart_storing_ms
            dockerfile: Dockerfile
        environment:
            - PORT=3021
            - DB_NAME=diagram_basic_column
            - TOPIC=svg-chart-basic-column
        expose:
            - "3021"
        depends_on:
            - kafka
            - kafka-setup
        ports:
            - "3021:3021"

    store-pie-chart:
        build:
            context: ../chart_storing_ms
            dockerfile: Dockerfile
        environment:
            - PORT=3022
            - DB_NAME=diagram_pie_chart
            - TOPIC=svg-chart-pie
        expose:
            - "3022"
        depends_on:
            - kafka
            - kafka-setup
        ports:
            - "3022:3022"

    store-line-annotations:
        build:
            context: ../chart_storing_ms
            dockerfile: Dockerfile
        environment:
            - PORT=3020
            - DB_NAME=diagrams_line_annotations
            - TOPIC=svg-chart-line-annotations
        expose:
            - "3023"
        depends_on:
            - kafka
            - kafka-setup
        ports:
            - "3023:3023"

    store-dependency-wheel:
        build:
            context: ../chart_storing_ms
            dockerfile: Dockerfile
        environment:
            - PORT=3024
            - DB_NAME=diagram_dependency_wheel
            - TOPIC=svg-chart-dependency-wheel
        expose:
            - "3024"
        depends_on:
            - kafka
            - kafka-setup
        ports:
            - "3024:3024"

    store-network-graph:
        build:
            context: ../chart_storing_ms
            dockerfile: Dockerfile
        environment:
            - PORT=3025
            - DB_NAME=diagram_network_graph
            - TOPIC=svg-chart-network-graph
        expose:
            - "3025"
        depends_on:
            - kafka
            - kafka-setup
        ports:
            - "3025:3025"

    store-polar-chart:
        build:
            context: ../chart_storing_ms
            dockerfile: Dockerfile
        environment:
            - PORT=3026
            - DB_NAME=diagram_polar_chart
            - TOPIC=svg-chart-polar
        expose:
            - "3026"
        depends_on:
            - kafka
            - kafka-setup
        ports:
            - "3026:3026"

    store-word-cloud:
        build:
            context: ../chart_storing_ms
            dockerfile: Dockerfile
        environment:
            - PORT=3027
            - DB_NAME=diagram_word_cloud
            - TOPIC=svg-chart-word-cloud
        expose:
            - "3027"
        depends_on:
            - kafka
            - kafka-setup
        ports:
            - "3027:3027"

    store-organization-chart:
        build:
            context: ../chart_storing_ms
            dockerfile: Dockerfile
        environment:
            - PORT=3028
            - DB_NAME=diagram_organization_chart
            - TOPIC=svg-chart-organization
        expose:
            - "3028"
        depends_on:
            - kafka
            - kafka-setup
        ports:
            - "3028:3028"

    diagram-fetcher:
        build:
            context: ../microservice-diagram-fetcher
            dockerfile: Dockerfile
        depends_on:
            - kafka
            - kafka-setup
            - mycharts-data-uploader
        ports:
            - "3030:3030"
