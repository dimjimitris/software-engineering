services:
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    expose:
      - "2181"
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      start_period: 10s
      retries: 3
      interval: 10s
      timeout: 5s

  kafka:
    container_name: kafka_broker
    image: wurstmeister/kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    expose:
      - "9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: "kafka_broker"
      KAFKA_ADVERTISED_PORT: "9092"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_CREATE_TOPICS_SEPARATOR: "$$'\n'"
      KAFKA_CREATE_TOPICS: |
        "basic_column_opts"
        "basic_line_opts"
        "dependency_wheel_opts"
        "line_with_annotations_opts"
        "network_graph_opts"
        "organization_opts"
        "pie_opts"
        "polar_opts"
        "word_cloud_opts"
        "basic_column_svg"
        "basic_line_svg"
        "dependency_wheel_svg"
        "line_with_annotations_svg"
        "network_graph_svg"
        "organization_svg"
        "pie_svg"
        "polar_svg"
        "word_cloud_svg"
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      retries: 10
      interval: 10s
      timeout: 5s

  nginx:
    container_name: nginx_gateway
    build: ../gateway
    depends_on:
      user_authentication:
        condition: service_healthy
      data_uploading:
        condition: service_healthy
    ports:
      - "80:80"

  frontend:
    container_name: frontend
    build: ../frontend
    env_file: ../frontend/.env
    environment:
      PORT: "4007"
      GOOGLE_CLIENT_ID: 303659298491-1khljhlgg9i80v4fcj7qtalgj4c9pcpj.apps.googleusercontent.com
      GOOGLE_CLIENT_SECRET: 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
      NEXTAUTH_SECRET: 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
      CHART_UPLOAD_URL: "http://localhost/api/chart/:chartType/create"
      CHART_FETCH_URL: "http://localhost/api/charts/:userId"
    ports:
      - "4007:4007"

  user_authentication:
    container_name: user_authentication_ms
    build: ../user_authentication_ms
    env_file: ../user_authentication_ms/.env
    environment:
      NODE_ENV: production
      HTTP_HOST: "0.0.0.0"
      HTTP_PORT: "5000"
      GOOGLE_CLIENT_ID: "303659298491-1khljhlgg9i80v4fcj7qtalgj4c9pcpj.apps.googleusercontent.com"
    expose:
      - "5000"

  data_uploading:
    container_name: data_uploading_ms
    build: ../data_uploading_ms
    depends_on:
      kafka:
        condition: service_healthy
    env_file: ../data_uploading_ms/.env
    environment:
      NODE_ENV: "production"
      HTTP_HOST: "0.0.0.0"
      HTTP_PORT: "6000"
      KAFKA_CLIENT_ID: "data_uploading_ms"
      KAFKA_BASIC_COLUMN_TOPIC: "basic_column_opts"
      KAFKA_BASIC_LINE_TOPIC: "basic_line_opts"
      KAFKA_DEPENDENCY_WHEEL_TOPIC: "dependency_wheel_opts"
      KAFKA_LINE_WITH_ANNOTATIONS_TOPIC: "line_with_annotations_opts"
      KAFKA_NETWORK_GRAPH_TOPIC: "network_graph_opts"
      KAFKA_ORGANIZATION_TOPIC: "organization_opts"
      KAFKA_PIE_TOPIC: "pie_opts"
      KAFKA_POLAR_TOPIC: "polar_opts"
      KAFKA_WORD_CLOUD_TOPIC: "word_cloud_opts"
      KAFKA_BROKERS: "kafka_broker:9092"
    expose:
      - "6000"

  basic_column_creation:
    container_name: basic_column_creation_ms
    build: ../chart_creation_ms
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      NODE_ENV: "production"
      CHART_TYPE: "basic_column"
      KAFKA_CLIENT_ID: "basic_column_creation_ms"
      KAFKA_CONSUMER_GROUP_ID: "basic_column_opts_group"
      KAFKA_CONSUMER_TOPIC: "basic_column_opts"
      KAFKA_PRODUCER_TOPIC: "basic_column_svg"
      KAFKA_BROKERS: "kafka_broker:9092"

  basic_column_storing:
    container_name: basic_column_storing
    build: ../chart_storing_ms
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      NODE_ENV: "production"
      HTTP_HOST: "0.0.0.0"
      HTTP_PORT: "7000"
      CHART_TYPE: "basic_column"
      MONGO_ATLAS_URL: "mongodb+srv://saas08:saas08@cluster0.zuzcca6.mongodb.net/?retryWrites=true&w=majority"
      MONGO_ATLAS_DB_NAME: "diagrams_line_basic"
      MONGO_ATLAS_DB_COLLECTION: "diagram"
      KAFKA_CLIENT_ID: "basic_column_storing_ms"
      KAFKA_CONSUMER_GROUP_ID: "basic_column_storing_group"
      KAFKA_CONSUMER_TOPIC: "basic_column_svg"
      KAFKA_BROKERS: "kafka_broker:9092"

#  chart_aggregation:
#    container_name: chart_aggregation_ms
#    build: ../chart_aggregation_ms
#    env_file: ../chart_aggregation_ms/.env
#    environment:
#      NODE_ENV: production
#      HTTP_HOST: "0.0.0.0"
#      HTTP_PORT: "3000"
#    expose:
#      - "3000"
#
#  user_management:
#    container_name: user_management_ms
#    build: ../user_management_ms
#    env_file: ../user_management_ms/.env
#    environment:
#      NODE_ENV: production
#      HTTP_HOST: "0.0.0.0"
#      HTTP_PORT: "3001"
#    expose:
#      - "3001"
#
#  # This "container" is a workaround to pre-create topics
#  kafka-setup:
#    image: confluentinc/cp-kafka:5.1.1
#    hostname: kafka-setup
#    container_name: kafka-setup
#    depends_on:
#      - kafka
#    command: "bash -c 'echo Waiting for Kafka to be ready... && \
#                       cub kafka-ready -b kafka:9092 1 20 && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-line-basic && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-line-basic && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-line-annotations && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-line-annotations && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-basic-column && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-basic-column && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-pie && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-pie && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-dependency-wheel && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-dependency-wheel && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-network-graph && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-network-graph && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-polar && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-polar && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-word-cloud && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-word-cloud && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic csv-chart-organization && \
#                       kafka-topics --create --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 --topic svg-chart-organization && \
#                       echo Waiting 60 seconds for Connect to be ready... && \
#                       sleep 60'"
#    environment:
#      # The following settings are listed here only to satisfy the image's requirements.
#      # We override the image's `command` anyway, hence this container will not start a broker.
#      KAFKA_BROKER_ID: ignored
#      KAFKA_ZOOKEEPER_CONNECT: ignored
#
#  mycharts-data-uploader:
#    build:
#      context: ../microservice-data-uploader
#      dockerfile: Dockerfile
#    volumes:
#      - ../microservice-data-uploader:/app
#    ports:
#      - "3001:3001"
#
#  mycharts-frontend:
#    build:
#      context: ../frontend
#      dockerfile: Dockerfile
#    depends_on:
#      - kafka
#    ports:
#      - "3000:3000"
#
#  chart-line-basic:
#    build:
#      context: ../microservice-chart-line-basic
#      dockerfile: Dockerfile
#    depends_on:
#      - kafka
#      - kafka-setup
#      - mycharts-data-uploader
#    ports:
#      - "3003:3003"
#
#  store-line-basic:
#    build:
#      context: ../microservice-store-line-basic
#      dockerfile: Dockerfile
#    depends_on:
#      - kafka
#      - kafka-setup
#    ports:
#      - "3020:3020"
#
#  store-basic-column:
#    build:
#      context: ../microservice-store-basic-column
#      dockerfile: Dockerfile
#    depends_on:
#      - kafka
#      - kafka-setup
#    ports:
#      - "3021:3021"
#
#  store-pie-chart:
#    build:
#      context: ../microservice-store-pie-chart
#      dockerfile: Dockerfile
#    depends_on:
#      - kafka
#      - kafka-setup
#    ports:
#      - "3022:3022"
#
#  store-line-annotations:
#    build:
#      context: ../microservice-store-line-annotations
#      dockerfile: Dockerfile
#    depends_on:
#      - kafka
#      - kafka-setup
#    ports:
#      - "3023:3023"
#
#  store-dependency-wheel:
#    build:
#      context: ../microservice-store-dependency-wheel
#      dockerfile: Dockerfile
#    depends_on:
#      - kafka
#      - kafka-setup
#    ports:
#      - "3024:3024"
#
#  store-network-graph:
#    build:
#      context: ../microservice-store-network-graph
#      dockerfile: Dockerfile
#    depends_on:
#      - kafka
#      - kafka-setup
#    ports:
#      - "3025:3025"
#
#  store-polar-chart:
#    build:
#      context: ../microservice-store-polar-chart
#      dockerfile: Dockerfile
#    depends_on:
#      - kafka
#      - kafka-setup
#    ports:
#      - "3026:3026"
#
#  store-word-cloud:
#    build:
#      context: ../microservice-store-word-cloud
#      dockerfile: Dockerfile
#    depends_on:
#      - kafka
#      - kafka-setup
#    ports:
#      - "3027:3027"
#
#  store-organization-chart:
#    build:
#      context: ../microservice-store-organization-chart
#      dockerfile: Dockerfile
#    depends_on:
#      - kafka
#      - kafka-setup
#    ports:
#      - "3028:3028"
#
#  diagram-fetcher:
#    build:
#      context: ../microservice-diagram-fetcher
#      dockerfile: Dockerfile
#    depends_on:
#      - kafka
#      - kafka-setup
#      - mycharts-data-uploader
#    ports:
#      - "3030:3030"