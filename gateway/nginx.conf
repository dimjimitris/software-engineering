events {}

http {
    upstream auth {
        server user_authentication:5000;
    }

    upstream upload {
        server data_uploading:6000;
    }

    upstream store {
        server basic_column_storing:7000;
    }

    server {
        listen 80;

        # Match '/chart/:type/new' requests (capture expression using parentheses)
        location ~ ^/api/chart/([^/]+)/create$ {
            include ./cors_headers.conf;

            # The "/authenticate" route"s response will contain an "X-User-ID"
            # HTTP header containing the user ID of the authenticated client
            # in the case of a successful authentication.
            # The same header is then added to the original request.
            
            #auth_request /authenticate;
            #auth_request_set $userId $upstream_http_x_user_id;
            #proxy_set_header X-User-ID $userId;
            #proxy_set_header Authorization "";

            # Pass the userId query parameter to the upstream server
            set $args userId=$arg_userId;

            # Send request to the appropriate endpoint using the captured expression
            proxy_pass http://upload/api/chart/$1/create$is_args$args;
        }

        location ~ ^/api/charts/([^/]+)/([^/]+)$ {
            include ./cors_headers.conf;

            #auth_request /authenticate;
            #auth_request_set $userId $upstream_http_x_user_id;
            #proxy_set_header X-User-ID $userId;

            # Pass the userId query parameter to the upstream server
            set $args $args&userId=$arg_userId;

            proxy_set_header Authorization "";
            proxy_pass http://store/api/charts/$1/$2;
        }

        # Match '/authenticate' requests
        location = /authenticate {
            internal;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_pass http://auth/authenticate;
        }
    }
}
