events {}

http {
    upstream userauth {
        server user_authentication:4000;
    }

    upstream usermgmt {
        server user_management:5000;
    }

    upstream dataupload {
        server data_uploading:6000;
    }

    upstream chartstore {
        server basic_column_storing_svg:7000;
        server basic_column_storing_html:8000;
        server basic_column_storing_pdf:9000;
        server basic_column_storing_png:10000;
    }

    upstream aggregate {
        server chart_aggregation:11000;
    }

    server {
        listen 80;

        # Match '/api/user/new' requests
        location = /api/user/new {
            include ./cors_headers.conf;

            # The "/authenticate" route"s response will contain an "X-User-ID"
            # HTTP header containing the user ID of the authenticated client
            # in the case of a successful authentication.
            # The same header is then added to the original request.

            auth_request /authenticate;
            auth_request_set $userId $upstream_http_x_user_id;
            proxy_set_header X-User-ID $userId;
            proxy_set_header Authorization "";

            proxy_pass http://usermgmt/api/user/new;
        }

        # Match '/api/user/tokens/:userId/:addTokens' requests
        location ~ ^/api/user/tokens/([^/]+)/([^/]+)$ {
            include ./cors_headers.conf;

            auth_request /authenticate;
            auth_request_set $userId $upstream_http_x_user_id;
            proxy_set_header X-User-ID $userId;
            proxy_set_header Authorization "";

            proxy_pass http://usermgmt/api/user/tokens/$1/$2;
        }

        # Match '/api/user/updateLastLogIn/:userId' requests
        location ~ ^/api/user/updateLastLogIn/([^/]+)$ {
            include ./cors_headers.conf;

            auth_request /authenticate;
            auth_request_set $userId $upstream_http_x_user_id;
            proxy_set_header X-User-ID $userId;
            proxy_set_header Authorization "";

            proxy_pass http://usermgmt/api/user/updateLastLogIn/$1;
        }

        # Match '/api/chart/:chartType/create' requests (capture expression using parentheses)
        location ~ ^/api/chart/([^/]+)/create$ {
            include ./cors_headers.conf;

            auth_request /authenticate;
            auth_request_set $userId $upstream_http_x_user_id;
            proxy_set_header X-User-ID $userId;
            proxy_set_header Authorization "";

            proxy_pass http://dataupload/api/chart/$1/create;
        }

        # Match '/api/chart/:chartType/:fileType/:userId' requests
        location ~ ^/api/chart/([^/]+)/([^/]+)/([^/]+)$ {
            include ./cors_headers.conf;

            auth_request /authenticate;
            auth_request_set $userId $upstream_http_x_user_id;
            proxy_set_header X-User-ID $userId;
            proxy_set_header Authorization "";

            proxy_pass http://chartstore/api/chart/$1/$2/$3;
        }

        # Match '/api/charts/:userId' requests
        location ~ ^/api/charts/([^/]+)$ {
            include ./cors_headers.conf;

            auth_request /authenticate;
            auth_request_set $userId $upstream_http_x_user_id;
            proxy_set_header X-User-ID $userId;
            proxy_set_header Authorization "";

            proxy_pass http://aggregate/api/charts/$1;
        }

        # Match '/api/charts/:chartType/:userId' requests
        location ~ ^/api/charts/([^/]+)/([^/]+)$ {
            include ./cors_headers.conf;

            auth_request /authenticate;
            auth_request_set $userId $upstream_http_x_user_id;
            proxy_set_header X-User-ID $userId;
            proxy_set_header Authorization "";

            proxy_pass http://chartstore/api/charts/$1/$2;
        }

        # Match '/authenticate' requests
        location = /authenticate {
            internal;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_pass http://userauth/authenticate;
        }
    }
}
